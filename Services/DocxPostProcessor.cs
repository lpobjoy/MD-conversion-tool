using DocumentFormat.OpenXml.Packaging;
using DocumentFormat.OpenXml.Wordprocessing;
using System;
using System.IO;
using System.Linq;

namespace MDConverter.Services;

/// <summary>
/// Post-processes DOCX files to fix issues like duplicate content from Pandoc WASM
/// </summary>
public class DocxPostProcessor
{
    /// <summary>
    /// Removes duplicate content from a DOCX file generated by Pandoc WASM
    /// </summary>
    public static byte[] RemoveDuplicateContent(byte[] docxBytes)
    {
        try
        {
            Console.WriteLine("üîß Post-processing DOCX to remove duplicate content...");
            
            // Safety check - don't process files larger than 50MB
            if (docxBytes.Length > 50 * 1024 * 1024)
            {
                Console.WriteLine($"‚ö†Ô∏è File too large ({docxBytes.Length / 1024 / 1024}MB) - skipping post-processing");
                return docxBytes;
            }
            
            using var inputStream = new MemoryStream(docxBytes);
            using var outputStream = new MemoryStream();
            
            // Copy input to output stream so we can modify it
            inputStream.CopyTo(outputStream);
            outputStream.Position = 0;
            
            using (var document = WordprocessingDocument.Open(outputStream, true))
            {
                var body = document.MainDocumentPart?.Document?.Body;
                if (body == null)
                {
                    Console.WriteLine("‚ö†Ô∏è Could not access document body");
                    return docxBytes; // Return original if we can't process
                }
                
                var paragraphs = body.Elements<Paragraph>().ToList();
                Console.WriteLine($"üìÑ Document has {paragraphs.Count} paragraphs");
                
                // Safety check - don't process documents with too many paragraphs
                if (paragraphs.Count > 10000)
                {
                    Console.WriteLine($"‚ö†Ô∏è Too many paragraphs ({paragraphs.Count}) - skipping duplication check");
                    return docxBytes;
                }
                
                // Find the midpoint - if content is duplicated, it will be exactly doubled
                int midPoint = paragraphs.Count / 2;
                
                if (paragraphs.Count % 2 == 0 && midPoint > 0 && midPoint < 5000)
                {
                    // Check if second half is identical to first half
                    // Sample a few paragraphs first for quick check
                    bool quickCheck = true;
                    int sampleSize = Math.Min(10, midPoint);
                    
                    for (int i = 0; i < sampleSize; i++)
                    {
                        int idx = (i * midPoint) / sampleSize; // Distributed sampling
                        var firstPara = paragraphs[idx].InnerText;
                        var secondPara = paragraphs[midPoint + idx].InnerText;
                        
                        if (firstPara != secondPara)
                        {
                            quickCheck = false;
                            break;
                        }
                    }
                    
                    if (!quickCheck)
                    {
                        Console.WriteLine("‚ÑπÔ∏è Quick check suggests no duplication");
                        return docxBytes;
                    }
                    
                    // Quick check passed, do full verification
                    bool isDuplicate = true;
                    
                    for (int i = 0; i < midPoint; i++)
                    {
                        var firstPara = paragraphs[i].InnerText;
                        var secondPara = paragraphs[midPoint + i].InnerText;
                        
                        if (firstPara != secondPara)
                        {
                            isDuplicate = false;
                            break;
                        }
                    }
                    
                    if (isDuplicate)
                    {
                        Console.WriteLine("‚úÖ Detected duplicate content - removing second half");
                        
                        // Remove the second half (duplicate) in reverse order to avoid index issues
                        for (int i = paragraphs.Count - 1; i >= midPoint; i--)
                        {
                            paragraphs[i].Remove();
                        }
                        
                        document.MainDocumentPart?.Document?.Save();
                        Console.WriteLine($"‚úÖ Removed {midPoint} duplicate paragraphs");
                    }
                    else
                    {
                        Console.WriteLine("‚ÑπÔ∏è No duplicate content detected");
                    }
                }
                else
                {
                    Console.WriteLine("‚ÑπÔ∏è Paragraph count is odd or too large - no exact duplication");
                }
            }
            
            return outputStream.ToArray();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå Error post-processing DOCX: {ex.Message}");
            Console.WriteLine($"   Stack trace: {ex.StackTrace}");
            return docxBytes; // Return original on error
        }
    }
}
